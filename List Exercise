{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data \n",
    "import numpy as np\n",
    "revenue = [14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50]\n",
    "expenses = [12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2522.67, 1911.39, -3707.79, -2914.31, -599.92, 7265.24, 8210.55, 3944.97, 3328.39, -2238.65, 659.6, 11629.54]\n"
     ]
    }
   ],
   "source": [
    "#Finding profit for Each Month\n",
    "profitEachMonth = list()\n",
    "for i in range(len(revenue)):\n",
    "    profitEachMonth.append(round(revenue[i] - expenses[i] , 2))\n",
    "print(profitEachMonth)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1765.87, 1337.97, -2595.45, -2040.02, -419.94, 5085.67, 5747.38, 2761.48, 2329.87, -1567.06, 461.72, 8140.68]\n"
     ]
    }
   ],
   "source": [
    "#profitAfterTax\n",
    "#Tax rate is 30 percent\n",
    "profitAterTax = list()\n",
    "for i in range(len(profitEachMonth)):\n",
    "    profitAterTax.append(round(profitEachMonth[i] * 0.70 , 2))\n",
    "print(profitAterTax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.12, 0.18, -0.3, -0.22, -0.05, 0.63, 0.5, 0.28, 0.23, -0.11, 0.04, 0.53]\n"
     ]
    }
   ],
   "source": [
    "#Profit margin for each month\n",
    "#Equals to profit after tax divided by revenue\n",
    "profitMarginEachMonth = list()\n",
    "for i in range(len(revenue)):\n",
    "    profitMarginEachMonth.append(round(profitAterTax[i]/revenue[i] , 2))\n",
    "print(profitMarginEachMonth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of good months: 6\n",
      "Number of bad months: 6\n"
     ]
    }
   ],
   "source": [
    "#Good Months - where profit after tax is greater than the mean of the year\n",
    "#Bad Months - where profit after tax is lesser than the mean of the year\n",
    "meanProfit = np.mean(profitAterTax)\n",
    "count_good = 0\n",
    "count_bad = 0\n",
    "for i in range(len(profitAterTax)):\n",
    "    if(profitAterTax[i] > meanProfit):\n",
    "        count_good = count_good + 1\n",
    "    else:\n",
    "        count_bad = count_bad + 1\n",
    "\n",
    "print(\"Number of good months: \"+ str(count_good))\n",
    "print(\"Number of bad months: \"+ str(count_bad))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best month revenue: 8140.68\n",
      "Worst month revenue: -2595.45\n"
     ]
    }
   ],
   "source": [
    "#Best Month  - where profit after tax was max of the year \n",
    "#Worst Month  - where profit after tax was min of the year \n",
    "bestMonth = 0\n",
    "worstMonth = 0\n",
    "\n",
    "bestMonth = np.max(profitAterTax)\n",
    "worstMonth = np.min(profitAterTax)\n",
    "\n",
    "print(\"Best month revenue: \"+ str(bestMonth))\n",
    "print(\"Worst month revenue: \"+ str(worstMonth))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
